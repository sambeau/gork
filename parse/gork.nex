
/\/\/[^\n]*\n/  { /* Skip comments. */ }

/\[/ { return BEGIN }
/\]/ { return END }

/\(/ { return LB }
/\)/ { return RB }

/as/ { return AS }
/by/ { return BY }
/date/ { return DATE }
/down/ { return DOWN }
/east/ { return EAST }
/else/ { return ELSE }
/exits?/ { return EXIT }
/game/ { return GAME }
/if/ { return IF }
/intro/ { return INTRO }
/is/ { return IS }
/loc(ation)?/ { return LOCATION }
/north/ { return NORTH }
/not/ { return NOT }
/south/ { return SOUTH }
/start/ { return START }
/then/ { return THEN }
/title/ { return TITLE }
/to/ { return TO }
/up/ { return UP }
/ver(sion)?/ { return VERSION }
/west/ { return WEST }

/[0-9]+/ { lval.n,_ = strconv.Atoi(yylex.Text()); return NUM }
/[a-zA-Z][a-zA-Z0-9_\-]*/ { lval.s = yylex.Text(); return NAME }
/[0-9]+(\.[0-9]+)*(-([a-zA-z0-9\.]+)?)*/{ lval.t = Text{Pos{yylex.Line(), yylex.Column()}, yylex.Text()}; return VNUM }

/"[^"]*"/ < { }
	/[ \t\n]+/  { }
	/["]/      { return QUOTE}
	/{[^ \t\n"]+}/  { s:=yylex.Text();lval.h = Handle{Pos{yylex.Line(), yylex.Column()}, s[1:len(s)-1] }; return HANDLEBAR }
	/[^ \t\n"]+/  { lval.t = Text{Pos{yylex.Line(), yylex.Column()}, yylex.Text() }; return TEXT }
> {  }

/,/  { return COMMA  }

/[ \t\n]+/  { /* Skip whitespace: spaces, tabs, newlines. */ }

//

package main

import (
	"os"
	"regexp"
	"strconv"
	"fmt"
)

var whitespaceRx = regexp.MustCompile(`\s+`)

func (yylex Lexer) Error(e string) {
	fmt.Printf("%s:%v:%v: %s: at '%s'\n", "stdin", 1+yylex.Line(), 1+yylex.Column(), e, yylex.Text())
}

func (yylex *Lexer) SText() frame {
	return yylex.stack[len(yylex.stack)-1]
}

func main() {
  yyParse(NewLexer(os.Stdin))
}
